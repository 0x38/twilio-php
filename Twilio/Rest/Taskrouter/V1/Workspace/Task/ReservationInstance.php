<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Rest\Taskrouter\V1\Workspace\Task;

use Twilio\Exceptions\TwilioException;
use Twilio\InstanceResource;
use Twilio\Values;
use Twilio\Version;

/**
 * @property string accountSid
 * @property string dateCreated
 * @property string dateUpdated
 * @property string reservationStatus
 * @property string sid
 * @property string taskSid
 * @property string workerName
 * @property string workerSid
 * @property string workspaceSid
 */
class ReservationInstance extends InstanceResource {
    /**
     * Initialize the ReservationInstance
     * 
     * @return ReservationInstance 
     */
    public function __construct(Version $version, array $payload, $workspaceSid, $taskSid, $sid = null) {
        parent::__construct($version);
        
        // Marshaled Properties
        $this->properties = array(
            'accountSid' => $payload['account_sid'],
            'dateCreated' => $payload['date_created'],
            'dateUpdated' => $payload['date_updated'],
            'reservationStatus' => $payload['reservation_status'],
            'sid' => $payload['sid'],
            'taskSid' => $payload['task_sid'],
            'workerName' => $payload['worker_name'],
            'workerSid' => $payload['worker_sid'],
            'workspaceSid' => $payload['workspace_sid'],
        );
        
        $this->solution = array(
            'workspaceSid' => $workspaceSid,
            'taskSid' => $taskSid,
            'sid' => $sid ?: $this->properties['sid'],
        );
    }

    /**
     * Generate an instance context for the instance, the context is capable of
     * performing various actions.  All instance actions are proxied to the context
     * 
     * @return ReservationContext Context for this ReservationInstance
     */
    protected function proxy() {
        if (!$this->context) {
            $this->context = new ReservationContext(
                $this->version,
                $this->solution['workspaceSid'],
                $this->solution['taskSid'],
                $this->solution['sid']
            );
        }
        
        return $this->context;
    }

    /**
     * @return string The account_sid
     */
    protected function getAccountSid() {
        return $this->properties['accountSid'];
    }

    /**
     * @return string The date_created
     */
    protected function getDateCreated() {
        return $this->properties['dateCreated'];
    }

    /**
     * @return string The date_updated
     */
    protected function getDateUpdated() {
        return $this->properties['dateUpdated'];
    }

    /**
     * @return string The reservation_status
     */
    protected function getReservationStatus() {
        return $this->properties['reservationStatus'];
    }

    /**
     * @return string The sid
     */
    protected function getSid() {
        return $this->properties['sid'];
    }

    /**
     * @return string The task_sid
     */
    protected function getTaskSid() {
        return $this->properties['taskSid'];
    }

    /**
     * @return string The worker_name
     */
    protected function getWorkerName() {
        return $this->properties['workerName'];
    }

    /**
     * @return string The worker_sid
     */
    protected function getWorkerSid() {
        return $this->properties['workerSid'];
    }

    /**
     * @return string The workspace_sid
     */
    protected function getWorkspaceSid() {
        return $this->properties['workspaceSid'];
    }

    /**
     * Fetch a ReservationInstance
     * 
     * @return ReservationInstance Fetched ReservationInstance
     */
    public function fetch() {
        return $this->proxy()->fetch();
    }

    /**
     * Update the ReservationInstance
     * 
     * @param string $reservationStatus The reservation_status
     * @return ReservationInstance Updated ReservationInstance
     */
    public function update($reservationStatus, $options) {
        return $this->proxy()->update(
            $reservationStatus,
            $options
        );
    }

    /**
     * Magic getter to access properties
     * 
     * @param string $name Property to access
     * @return mixed The requested property
     * @throws TwilioException For unknown properties
     */
    public function __get($name) {
        if (array_key_exists($name, $this->properties)) {
            $method = 'get' . ucfirst($name);
            return $this->$method();
        }
        
        throw new TwilioException('Unknown property: ' . $name);
    }

    /**
     * Provide a friendly representation
     * 
     * @return string Machine friendly representation
     */
    public function __toString() {
        $context = array();
        foreach ($this->solution as $key => $value) {
            $context[] = "$key=$value";
        }
        return '[Twilio.Taskrouter.V1.ReservationInstance ' . implode(' ', $context) . ']';
    }
}