<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Rest\Taskrouter\V1\Workspace;

use Twilio\Exceptions\TwilioException;
use Twilio\ListResource;
use Twilio\Rest\Taskrouter\V1\Workspace\TaskQueue\TaskQueuesStatisticsList;
use Twilio\Values;
use Twilio\Version;

/**
 * @property TaskQueuesStatisticsList statistics
 */
class TaskQueueList extends ListResource {
    protected $_statistics = null;

    /**
     * Construct the TaskQueueList
     * 
     * @param Version $version Version that contains the resource
     * @param string $workspaceSid The workspace_sid
     * @return TaskQueueList 
     */
    public function __construct(Version $version, $workspaceSid) {
        parent::__construct($version);
        
        // Path Solution
        $this->solution = array(
            'workspaceSid' => $workspaceSid,
        );
        $this->uri = '/Workspaces/' . $workspaceSid . '/TaskQueues';
    }

    /**
     * Create a new TaskQueueInstance
     * 
     * @param string $friendlyName The friendly_name
     * @param string $reservationActivitySid The reservation_activity_sid
     * @param string $assignmentActivitySid The assignment_activity_sid
     * @return TaskQueueInstance Newly created TaskQueueInstance
     */
    public function create($friendlyName, $reservationActivitySid, $assignmentActivitySid, $options) {
        $data = Values::of(array(
            'FriendlyName' => $friendlyName,
            'ReservationActivitySid' => $reservationActivitySid,
            'AssignmentActivitySid' => $assignmentActivitySid,
            'TargetWorkers' => $options['targetWorkers'],
            'MaxReservedWorkers' => $options['maxReservedWorkers'],
        ));
        
        $payload = $this->version->create(
            'POST',
            $this->uri,
            array(),
            $data
        );
        
        return new TaskQueueInstance(
            $this->version,
            $payload,
            $this->solution['workspaceSid']
        );
    }

    /**
     * Access the statistics
     */
    protected function getStatistics() {
        if (!$this->_statistics) {
            $this->_statistics = new TaskQueuesStatisticsList(
                $this->version,
                $this->solution['workspaceSid']
            );
        }
        
        return $this->_statistics;
    }

    /**
     * Constructs a TaskQueueContext
     * 
     * @param string $sid The sid
     * @return TaskQueueContext 
     */
    public function getContext($sid) {
        return new TaskQueueContext(
            $this->version,
            $this->solution['workspaceSid'],
            $sid
        );
    }

    /**
     * Magic getter to lazy load subresources
     * 
     * @param string $name Subresource to return
     * @return ListResource The requested subresource
     * @throws TwilioException For unknown subresources
     */
    public function __get($name) {
        if (property_exists($this, '_' . $name)) {
            $method = 'get' . ucfirst($name);
            return $this->$method();
        }
        
        throw new TwilioException('Unknown subresource ' . $name);
    }

    /**
     * Provide a friendly representation
     * 
     * @return string Machine friendly representation
     */
    public function __toString() {
        return '[Twilio.Taskrouter.V1.TaskQueueList]';
    }
}