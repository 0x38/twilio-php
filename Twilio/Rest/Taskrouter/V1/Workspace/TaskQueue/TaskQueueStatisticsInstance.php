<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Rest\Taskrouter\V1\Workspace\TaskQueue;

use Twilio\Exceptions\TwilioException;
use Twilio\InstanceResource;
use Twilio\Values;
use Twilio\Version;

/**
 * @property string accountSid
 * @property string cumulative
 * @property string realtime
 * @property string taskQueueSid
 * @property string workspaceSid
 */
class TaskQueueStatisticsInstance extends InstanceResource {
    /**
     * Initialize the TaskQueueStatisticsInstance
     * 
     * @return TaskQueueStatisticsInstance 
     */
    public function __construct(Version $version, array $payload, $workspaceSid, $taskQueueSid) {
        parent::__construct($version);
        
        // Marshaled Properties
        $this->properties = array(
            'accountSid' => $payload['account_sid'],
            'cumulative' => $payload['cumulative'],
            'realtime' => $payload['realtime'],
            'taskQueueSid' => $payload['task_queue_sid'],
            'workspaceSid' => $payload['workspace_sid'],
        );
        
        $this->solution = array(
            'workspaceSid' => $workspaceSid,
            'taskQueueSid' => $taskQueueSid,
        );
    }

    /**
     * Generate an instance context for the instance, the context is capable of
     * performing various actions.  All instance actions are proxied to the context
     * 
     * @return TaskQueueStatisticsContext Context for this
     *                                    TaskQueueStatisticsInstance
     */
    protected function proxy() {
        if (!$this->context) {
            $this->context = new TaskQueueStatisticsContext(
                $this->version,
                $this->solution['workspaceSid'],
                $this->solution['taskQueueSid']
            );
        }
        
        return $this->context;
    }

    /**
     * @return string The account_sid
     */
    protected function getAccountSid() {
        return $this->properties['accountSid'];
    }

    /**
     * @return string The cumulative
     */
    protected function getCumulative() {
        return $this->properties['cumulative'];
    }

    /**
     * @return string The realtime
     */
    protected function getRealtime() {
        return $this->properties['realtime'];
    }

    /**
     * @return string The task_queue_sid
     */
    protected function getTaskQueueSid() {
        return $this->properties['taskQueueSid'];
    }

    /**
     * @return string The workspace_sid
     */
    protected function getWorkspaceSid() {
        return $this->properties['workspaceSid'];
    }

    /**
     * Fetch a TaskQueueStatisticsInstance
     * 
     * @return TaskQueueStatisticsInstance Fetched TaskQueueStatisticsInstance
     */
    public function fetch($options) {
        return $this->proxy()->fetch(
            $options
        );
    }

    /**
     * Magic getter to access properties
     * 
     * @param string $name Property to access
     * @return mixed The requested property
     * @throws TwilioException For unknown properties
     */
    public function __get($name) {
        if (array_key_exists($name, $this->properties)) {
            $method = 'get' . ucfirst($name);
            return $this->$method();
        }
        
        throw new TwilioException('Unknown property: ' . $name);
    }

    /**
     * Provide a friendly representation
     * 
     * @return string Machine friendly representation
     */
    public function __toString() {
        $context = array();
        foreach ($this->solution as $key => $value) {
            $context[] = "$key=$value";
        }
        return '[Twilio.Taskrouter.V1.TaskQueueStatisticsInstance ' . implode(' ', $context) . ']';
    }
}