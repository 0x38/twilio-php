<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Rest\Taskrouter\V1\Workspace;

use Twilio\Exceptions\TwilioException;
use Twilio\ListResource;
use Twilio\Rest\Taskrouter\V1\Workspace\Worker\WorkersStatisticsList;
use Twilio\Values;
use Twilio\Version;

/**
 * @property WorkersStatisticsList statistics
 */
class WorkerList extends ListResource {
    protected $_statistics = null;

    /**
     * Construct the WorkerList
     * 
     * @param Version $version Version that contains the resource
     * @param string $workspaceSid The workspace_sid
     * @return WorkerList 
     */
    public function __construct(Version $version, $workspaceSid) {
        parent::__construct($version);
        
        // Path Solution
        $this->solution = array(
            'workspaceSid' => $workspaceSid,
        );
        $this->uri = '/Workspaces/' . $workspaceSid . '/Workers';
    }

    /**
     * Create a new WorkerInstance
     * 
     * @param string $friendlyName The friendly_name
     * @return WorkerInstance Newly created WorkerInstance
     */
    public function create($friendlyName, $options) {
        $data = Values::of(array(
            'FriendlyName' => $friendlyName,
            'ActivitySid' => $options['activitySid'],
            'Attributes' => $options['attributes'],
        ));
        
        $payload = $this->version->create(
            'POST',
            $this->uri,
            array(),
            $data
        );
        
        return new WorkerInstance(
            $this->version,
            $payload,
            $this->solution['workspaceSid']
        );
    }

    /**
     * Access the statistics
     */
    protected function getStatistics() {
        if (!$this->_statistics) {
            $this->_statistics = new WorkersStatisticsList(
                $this->version,
                $this->solution['workspaceSid']
            );
        }
        
        return $this->_statistics;
    }

    /**
     * Constructs a WorkerContext
     * 
     * @param string $sid The sid
     * @return WorkerContext 
     */
    public function getContext($sid) {
        return new WorkerContext(
            $this->version,
            $this->solution['workspaceSid'],
            $sid
        );
    }

    /**
     * Magic getter to lazy load subresources
     * 
     * @param string $name Subresource to return
     * @return ListResource The requested subresource
     * @throws TwilioException For unknown subresources
     */
    public function __get($name) {
        if (property_exists($this, '_' . $name)) {
            $method = 'get' . ucfirst($name);
            return $this->$method();
        }
        
        throw new TwilioException('Unknown subresource ' . $name);
    }

    /**
     * Provide a friendly representation
     * 
     * @return string Machine friendly representation
     */
    public function __toString() {
        return '[Twilio.Taskrouter.V1.WorkerList]';
    }
}