<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Rest\Monitor\V1;

use Twilio\Exceptions\TwilioException;
use Twilio\InstanceResource;
use Twilio\Values;
use Twilio\Version;

/**
 * @property string accountSid
 * @property string alertText
 * @property string apiVersion
 * @property string dateCreated
 * @property string dateGenerated
 * @property string dateUpdated
 * @property string errorCode
 * @property string logLevel
 * @property string moreInfo
 * @property string requestMethod
 * @property string requestUrl
 * @property string requestVariables
 * @property string resourceSid
 * @property string responseBody
 * @property string responseHeaders
 * @property string sid
 * @property string url
 */
class AlertInstance extends InstanceResource {
    /**
     * Initialize the AlertInstance
     * 
     * @return AlertInstance 
     */
    public function __construct(Version $version, array $payload, $sid = null) {
        parent::__construct($version);
        
        // Marshaled Properties
        $this->properties = array(
            'accountSid' => $payload['account_sid'],
            'alertText' => $payload['alert_text'],
            'apiVersion' => $payload['api_version'],
            'dateCreated' => $payload['date_created'],
            'dateGenerated' => $payload['date_generated'],
            'dateUpdated' => $payload['date_updated'],
            'errorCode' => $payload['error_code'],
            'logLevel' => $payload['log_level'],
            'moreInfo' => $payload['more_info'],
            'requestMethod' => $payload['request_method'],
            'requestUrl' => $payload['request_url'],
            'resourceSid' => $payload['resource_sid'],
            'sid' => $payload['sid'],
            'url' => $payload['url'],
            'requestVariables' => array_key_exists('request_variables', $payload) ? $payload['request_variables'] : null,
            'responseBody' => array_key_exists('response_body', $payload) ? $payload['response_body'] : null,
            'responseHeaders' => array_key_exists('response_headers', $payload) ? $payload['response_headers'] : null,
        );
        
        $this->solution = array(
            'sid' => $sid ?: $this->properties['sid'],
        );
    }

    /**
     * Generate an instance context for the instance, the context is capable of
     * performing various actions.  All instance actions are proxied to the context
     * 
     * @return AlertContext Context for this AlertInstance
     */
    protected function proxy() {
        if (!$this->context) {
            $this->context = new AlertContext(
                $this->version,
                $this->solution['sid']
            );
        }
        
        return $this->context;
    }

    /**
     * @return string The account_sid
     */
    protected function getAccountSid() {
        return $this->properties['accountSid'];
    }

    /**
     * @return string The alert_text
     */
    protected function getAlertText() {
        return $this->properties['alertText'];
    }

    /**
     * @return string The api_version
     */
    protected function getApiVersion() {
        return $this->properties['apiVersion'];
    }

    /**
     * @return string The date_created
     */
    protected function getDateCreated() {
        return $this->properties['dateCreated'];
    }

    /**
     * @return string The date_generated
     */
    protected function getDateGenerated() {
        return $this->properties['dateGenerated'];
    }

    /**
     * @return string The date_updated
     */
    protected function getDateUpdated() {
        return $this->properties['dateUpdated'];
    }

    /**
     * @return string The error_code
     */
    protected function getErrorCode() {
        return $this->properties['errorCode'];
    }

    /**
     * @return string The log_level
     */
    protected function getLogLevel() {
        return $this->properties['logLevel'];
    }

    /**
     * @return string The more_info
     */
    protected function getMoreInfo() {
        return $this->properties['moreInfo'];
    }

    /**
     * @return string The request_method
     */
    protected function getRequestMethod() {
        return $this->properties['requestMethod'];
    }

    /**
     * @return string The request_url
     */
    protected function getRequestUrl() {
        return $this->properties['requestUrl'];
    }

    /**
     * @return string The request_variables
     */
    protected function getRequestVariables() {
        return $this->properties['requestVariables'];
    }

    /**
     * @return string The resource_sid
     */
    protected function getResourceSid() {
        return $this->properties['resourceSid'];
    }

    /**
     * @return string The response_body
     */
    protected function getResponseBody() {
        return $this->properties['responseBody'];
    }

    /**
     * @return string The response_headers
     */
    protected function getResponseHeaders() {
        return $this->properties['responseHeaders'];
    }

    /**
     * @return string The sid
     */
    protected function getSid() {
        return $this->properties['sid'];
    }

    /**
     * @return string The url
     */
    protected function getUrl() {
        return $this->properties['url'];
    }

    /**
     * Fetch a AlertInstance
     * 
     * @return AlertInstance Fetched AlertInstance
     */
    public function fetch() {
        return $this->proxy()->fetch();
    }

    /**
     * Deletes the AlertInstance
     * 
     * @return boolean True if delete succeeds, false otherwise
     */
    public function delete() {
        return $this->proxy()->delete();
    }

    /**
     * Magic getter to access properties
     * 
     * @param string $name Property to access
     * @return mixed The requested property
     * @throws TwilioException For unknown properties
     */
    public function __get($name) {
        if (array_key_exists($name, $this->properties)) {
            $method = 'get' . ucfirst($name);
            return $this->$method();
        }
        
        throw new TwilioException('Unknown property: ' . $name);
    }

    /**
     * Provide a friendly representation
     * 
     * @return string Machine friendly representation
     */
    public function __toString() {
        $context = array();
        foreach ($this->solution as $key => $value) {
            $context[] = "$key=$value";
        }
        return '[Twilio.Monitor.V1.AlertInstance ' . implode(' ', $context) . ']';
    }
}