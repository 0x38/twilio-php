<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Rest\Monitor\V1;

use Twilio\Exceptions\TwilioException;
use Twilio\InstanceResource;
use Twilio\Values;
use Twilio\Version;

/**
 * @property string accountSid
 * @property string actorSid
 * @property string actorType
 * @property string description
 * @property string eventData
 * @property string eventDate
 * @property string eventType
 * @property string resourceSid
 * @property string resourceType
 * @property string sid
 * @property string source
 * @property string sourceIpAddress
 */
class EventInstance extends InstanceResource {
    /**
     * Initialize the EventInstance
     * 
     * @return EventInstance 
     */
    public function __construct(Version $version, array $payload, $sid = null) {
        parent::__construct($version);
        
        // Marshaled Properties
        $this->properties = array(
            'accountSid' => $payload['account_sid'],
            'actorSid' => $payload['actor_sid'],
            'actorType' => $payload['actor_type'],
            'description' => $payload['description'],
            'eventData' => $payload['event_data'],
            'eventDate' => $payload['event_date'],
            'eventType' => $payload['event_type'],
            'resourceSid' => $payload['resource_sid'],
            'resourceType' => $payload['resource_type'],
            'sid' => $payload['sid'],
            'source' => $payload['source'],
            'sourceIpAddress' => $payload['source_ip_address'],
        );
        
        $this->solution = array(
            'sid' => $sid ?: $this->properties['sid'],
        );
    }

    /**
     * Generate an instance context for the instance, the context is capable of
     * performing various actions.  All instance actions are proxied to the context
     * 
     * @return EventContext Context for this EventInstance
     */
    protected function proxy() {
        if (!$this->context) {
            $this->context = new EventContext(
                $this->version,
                $this->solution['sid']
            );
        }
        
        return $this->context;
    }

    /**
     * @return string The account_sid
     */
    protected function getAccountSid() {
        return $this->properties['accountSid'];
    }

    /**
     * @return string The actor_sid
     */
    protected function getActorSid() {
        return $this->properties['actorSid'];
    }

    /**
     * @return string The actor_type
     */
    protected function getActorType() {
        return $this->properties['actorType'];
    }

    /**
     * @return string The description
     */
    protected function getDescription() {
        return $this->properties['description'];
    }

    /**
     * @return string The event_data
     */
    protected function getEventData() {
        return $this->properties['eventData'];
    }

    /**
     * @return string The event_date
     */
    protected function getEventDate() {
        return $this->properties['eventDate'];
    }

    /**
     * @return string The event_type
     */
    protected function getEventType() {
        return $this->properties['eventType'];
    }

    /**
     * @return string The resource_sid
     */
    protected function getResourceSid() {
        return $this->properties['resourceSid'];
    }

    /**
     * @return string The resource_type
     */
    protected function getResourceType() {
        return $this->properties['resourceType'];
    }

    /**
     * @return string The sid
     */
    protected function getSid() {
        return $this->properties['sid'];
    }

    /**
     * @return string The source
     */
    protected function getSource() {
        return $this->properties['source'];
    }

    /**
     * @return string The source_ip_address
     */
    protected function getSourceIpAddress() {
        return $this->properties['sourceIpAddress'];
    }

    /**
     * Fetch a EventInstance
     * 
     * @return EventInstance Fetched EventInstance
     */
    public function fetch() {
        return $this->proxy()->fetch();
    }

    /**
     * Magic getter to access properties
     * 
     * @param string $name Property to access
     * @return mixed The requested property
     * @throws TwilioException For unknown properties
     */
    public function __get($name) {
        if (array_key_exists($name, $this->properties)) {
            $method = 'get' . ucfirst($name);
            return $this->$method();
        }
        
        throw new TwilioException('Unknown property: ' . $name);
    }

    /**
     * Provide a friendly representation
     * 
     * @return string Machine friendly representation
     */
    public function __toString() {
        $context = array();
        foreach ($this->solution as $key => $value) {
            $context[] = "$key=$value";
        }
        return '[Twilio.Monitor.V1.EventInstance ' . implode(' ', $context) . ']';
    }
}