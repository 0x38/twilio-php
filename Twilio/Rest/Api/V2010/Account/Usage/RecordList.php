<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Rest\Api\V2010\Account\Usage;

use Twilio\Exceptions\TwilioException;
use Twilio\ListResource;
use Twilio\Rest\Api\V2010\Account\Usage\Record\AllTimeList;
use Twilio\Rest\Api\V2010\Account\Usage\Record\DailyList;
use Twilio\Rest\Api\V2010\Account\Usage\Record\LastMonthList;
use Twilio\Rest\Api\V2010\Account\Usage\Record\MonthlyList;
use Twilio\Rest\Api\V2010\Account\Usage\Record\ThisMonthList;
use Twilio\Rest\Api\V2010\Account\Usage\Record\TodayList;
use Twilio\Rest\Api\V2010\Account\Usage\Record\YearlyList;
use Twilio\Rest\Api\V2010\Account\Usage\Record\YesterdayList;
use Twilio\Values;
use Twilio\Version;

/**
 * @property AllTimeList allTime
 * @property DailyList daily
 * @property LastMonthList lastMonth
 * @property MonthlyList monthly
 * @property ThisMonthList thisMonth
 * @property TodayList today
 * @property YearlyList yearly
 * @property YesterdayList yesterday
 */
class RecordList extends ListResource {
    protected $_allTime = null;
    protected $_daily = null;
    protected $_lastMonth = null;
    protected $_monthly = null;
    protected $_thisMonth = null;
    protected $_today = null;
    protected $_yearly = null;
    protected $_yesterday = null;

    /**
     * Construct the RecordList
     * 
     * @param Version $version Version that contains the resource
     * @param string $accountSid A 34 character string that uniquely identifies
     *                           this resource.
     * @return RecordList 
     */
    public function __construct(Version $version, $accountSid) {
        parent::__construct($version);
        
        // Path Solution
        $this->solution = array(
            'accountSid' => $accountSid,
        );
        $this->uri = '/Accounts/' . $accountSid . '/Usage/Records.json';
    }

    /**
     * Access the allTime
     */
    protected function getAllTime() {
        if (!$this->_allTime) {
            $this->_allTime = new AllTimeList(
                $this->version,
                $this->solution['accountSid']
            );
        }
        
        return $this->_allTime;
    }

    /**
     * Access the daily
     */
    protected function getDaily() {
        if (!$this->_daily) {
            $this->_daily = new DailyList(
                $this->version,
                $this->solution['accountSid']
            );
        }
        
        return $this->_daily;
    }

    /**
     * Access the lastMonth
     */
    protected function getLastMonth() {
        if (!$this->_lastMonth) {
            $this->_lastMonth = new LastMonthList(
                $this->version,
                $this->solution['accountSid']
            );
        }
        
        return $this->_lastMonth;
    }

    /**
     * Access the monthly
     */
    protected function getMonthly() {
        if (!$this->_monthly) {
            $this->_monthly = new MonthlyList(
                $this->version,
                $this->solution['accountSid']
            );
        }
        
        return $this->_monthly;
    }

    /**
     * Access the thisMonth
     */
    protected function getThisMonth() {
        if (!$this->_thisMonth) {
            $this->_thisMonth = new ThisMonthList(
                $this->version,
                $this->solution['accountSid']
            );
        }
        
        return $this->_thisMonth;
    }

    /**
     * Access the today
     */
    protected function getToday() {
        if (!$this->_today) {
            $this->_today = new TodayList(
                $this->version,
                $this->solution['accountSid']
            );
        }
        
        return $this->_today;
    }

    /**
     * Access the yearly
     */
    protected function getYearly() {
        if (!$this->_yearly) {
            $this->_yearly = new YearlyList(
                $this->version,
                $this->solution['accountSid']
            );
        }
        
        return $this->_yearly;
    }

    /**
     * Access the yesterday
     */
    protected function getYesterday() {
        if (!$this->_yesterday) {
            $this->_yesterday = new YesterdayList(
                $this->version,
                $this->solution['accountSid']
            );
        }
        
        return $this->_yesterday;
    }

    /**
     * Magic getter to lazy load subresources
     * 
     * @param string $name Subresource to return
     * @return ListResource The requested subresource
     * @throws TwilioException For unknown subresources
     */
    public function __get($name) {
        if (property_exists($this, '_' . $name)) {
            $method = 'get' . ucfirst($name);
            return $this->$method();
        }
        
        throw new TwilioException('Unknown subresource ' . $name);
    }

    /**
     * Provide a friendly representation
     * 
     * @return string Machine friendly representation
     */
    public function __toString() {
        return '[Twilio.Api.V2010.RecordList]';
    }
}