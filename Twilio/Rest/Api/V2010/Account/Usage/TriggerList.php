<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Rest\Api\V2010\Account\Usage;

use Twilio\ListResource;
use Twilio\Values;
use Twilio\Version;

class TriggerList extends ListResource {
    /**
     * Construct the TriggerList
     * 
     * @param Version $version Version that contains the resource
     * @param string $accountSid A 34 character string that uniquely identifies
     *                           this resource.
     * @return TriggerList 
     */
    public function __construct(Version $version, $accountSid) {
        parent::__construct($version);
        
        // Path Solution
        $this->solution = array(
            'accountSid' => $accountSid,
        );
        
        $this->uri = '/Accounts/' . $accountSid . '/Usage/Triggers.json';
    }

    /**
     * Create a new TriggerInstance
     * 
     * @param string $callbackUrl URL Twilio will request when the trigger fires
     * @param string $triggerValue the value at which the trigger will fire
     * @param trigger.UsageCategory $usageCategory The usage category the trigger
     *                                             watches
     * @param array $options Optional Arguments
     * @return TriggerInstance Newly created TriggerInstance
     */
    public function create($callbackUrl, $triggerValue, $usageCategory, array $options = array()) {
        $options = new Values($options);
        
        $data = Values::of(array(
            'CallbackUrl' => $callbackUrl,
            'TriggerValue' => $triggerValue,
            'UsageCategory' => $usageCategory,
            'CallbackMethod' => $options['callbackMethod'],
            'FriendlyName' => $options['friendlyName'],
            'Recurring' => $options['recurring'],
            'TriggerBy' => $options['triggerBy'],
        ));
        
        $payload = $this->version->create(
            'POST',
            $this->uri,
            array(),
            $data
        );
        
        return new TriggerInstance(
            $this->version,
            $payload,
            $this->solution['accountSid']
        );
    }

    /**
     * Constructs a TriggerContext
     * 
     * @param string $sid Fetch by unique usage-trigger Sid
     * @return TriggerContext 
     */
    public function getContext($sid) {
        return new TriggerContext(
            $this->version,
            $this->solution['accountSid'],
            $sid
        );
    }

    /**
     * Provide a friendly representation
     * 
     * @return string Machine friendly representation
     */
    public function __toString() {
        return '[Twilio.Api.V2010.TriggerList]';
    }
}