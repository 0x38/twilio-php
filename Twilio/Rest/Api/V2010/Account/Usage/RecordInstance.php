<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Rest\Api\V2010\Account\Usage;

use Twilio\Exceptions\TwilioException;
use Twilio\InstanceResource;
use Twilio\Version;

/**
 * @property string accountSid
 * @property string apiVersion
 * @property record.Category category
 * @property string count
 * @property string countUnit
 * @property string description
 * @property string endDate
 * @property string price
 * @property string priceUnit
 * @property string startDate
 * @property string subresourceUris
 * @property string uri
 * @property string usage
 * @property string usageUnit
 */
class RecordInstance extends InstanceResource {
    /**
     * Initialize the RecordInstance
     * 
     * @return RecordInstance 
     */
    public function __construct(Version $version, array $payload, $accountSid) {
        parent::__construct($version);
        
        // Marshaled Properties
        $this->properties = array(
            'accountSid' => $payload['account_sid'],
            'apiVersion' => $payload['api_version'],
            'category' => $payload['category'],
            'count' => $payload['count'],
            'countUnit' => $payload['count_unit'],
            'description' => $payload['description'],
            'endDate' => $payload['end_date'],
            'price' => $payload['price'],
            'priceUnit' => $payload['price_unit'],
            'startDate' => $payload['start_date'],
            'subresourceUris' => $payload['subresource_uris'],
            'uri' => $payload['uri'],
            'usage' => $payload['usage'],
            'usageUnit' => $payload['usage_unit'],
        );
        
        $this->solution = array(
            'accountSid' => $accountSid,
        );
    }

    /**
     * @return string The Account that accrued the usage
     */
    protected function getAccountSid() {
        return $this->properties['accountSid'];
    }

    /**
     * @return string The api_version
     */
    protected function getApiVersion() {
        return $this->properties['apiVersion'];
    }

    /**
     * @return record.Category The category of usage
     */
    protected function getCategory() {
        return $this->properties['category'];
    }

    /**
     * @return string The number of usage events (e.g. the number of calls).
     */
    protected function getCount() {
        return $this->properties['count'];
    }

    /**
     * @return string The unit in which `Count` is measured
     */
    protected function getCountUnit() {
        return $this->properties['countUnit'];
    }

    /**
     * @return string A human-readable description of the usage category.
     */
    protected function getDescription() {
        return $this->properties['description'];
    }

    /**
     * @return string The last date usage is included in this record
     */
    protected function getEndDate() {
        return $this->properties['endDate'];
    }

    /**
     * @return string The total price of the usage
     */
    protected function getPrice() {
        return $this->properties['price'];
    }

    /**
     * @return string The currency in which `Price` is measured
     */
    protected function getPriceUnit() {
        return $this->properties['priceUnit'];
    }

    /**
     * @return string The first date usage is included in this record
     */
    protected function getStartDate() {
        return $this->properties['startDate'];
    }

    /**
     * @return string Subresources Uris for this UsageRecord
     */
    protected function getSubresourceUris() {
        return $this->properties['subresourceUris'];
    }

    /**
     * @return string The URI for this resource
     */
    protected function getUri() {
        return $this->properties['uri'];
    }

    /**
     * @return string The amount of usage
     */
    protected function getUsage() {
        return $this->properties['usage'];
    }

    /**
     * @return string The units in which `Usage` is measured
     */
    protected function getUsageUnit() {
        return $this->properties['usageUnit'];
    }

    /**
     * Magic getter to access properties
     * 
     * @param string $name Property to access
     * @return mixed The requested property
     * @throws TwilioException For unknown properties
     */
    public function __get($name) {
        if (array_key_exists($name, $this->properties)) {
            $method = 'get' . ucfirst($name);
            return $this->$method();
        }
        
        throw new TwilioException('Unknown property: ' . $name);
    }

    /**
     * Provide a friendly representation
     * 
     * @return string Machine friendly representation
     */
    public function __toString() {
        return '[Twilio.Api.V2010.RecordInstance]';
    }
}