<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Rest\Api\V2010\Account\Call;

use Twilio\Exceptions\TwilioException;
use Twilio\InstanceResource;
use Twilio\Values;
use Twilio\Version;

/**
 * @property string accountSid
 * @property string callCount
 * @property string callFeedbackCount
 * @property string dateCreated
 * @property string dateUpdated
 * @property string endDate
 * @property string includeSubaccounts
 * @property string issues
 * @property string qualityScoreAverage
 * @property string qualityScoreMedian
 * @property string qualityScoreStandardDeviation
 * @property string sid
 * @property string startDate
 * @property feedback_summary.Status status
 */
class FeedbackSummaryInstance extends InstanceResource {
    /**
     * Initialize the FeedbackSummaryInstance
     * 
     * @return FeedbackSummaryInstance 
     */
    public function __construct(Version $version, array $payload, $accountSid, $sid = null) {
        parent::__construct($version);
        
        // Marshaled Properties
        $this->properties = array(
            'accountSid' => $payload['account_sid'],
            'callCount' => $payload['call_count'],
            'callFeedbackCount' => $payload['call_feedback_count'],
            'dateCreated' => $payload['date_created'],
            'dateUpdated' => $payload['date_updated'],
            'endDate' => $payload['end_date'],
            'includeSubaccounts' => $payload['include_subaccounts'],
            'issues' => $payload['issues'],
            'qualityScoreAverage' => $payload['quality_score_average'],
            'qualityScoreMedian' => $payload['quality_score_median'],
            'qualityScoreStandardDeviation' => $payload['quality_score_standard_deviation'],
            'sid' => $payload['sid'],
            'startDate' => $payload['start_date'],
            'status' => $payload['status'],
        );
        
        $this->solution = array(
            'accountSid' => $accountSid,
            'sid' => $sid ?: $this->properties['sid'],
        );
    }

    /**
     * Generate an instance context for the instance, the context is capable of
     * performing various actions.  All instance actions are proxied to the context
     * 
     * @return FeedbackSummaryContext Context for this FeedbackSummaryInstance
     */
    protected function proxy() {
        if (!$this->context) {
            $this->context = new FeedbackSummaryContext(
                $this->version,
                $this->solution['accountSid'],
                $this->solution['sid']
            );
        }
        
        return $this->context;
    }

    /**
     * @return string The account_sid
     */
    protected function getAccountSid() {
        return $this->properties['accountSid'];
    }

    /**
     * @return string The call_count
     */
    protected function getCallCount() {
        return $this->properties['callCount'];
    }

    /**
     * @return string The call_feedback_count
     */
    protected function getCallFeedbackCount() {
        return $this->properties['callFeedbackCount'];
    }

    /**
     * @return string The date_created
     */
    protected function getDateCreated() {
        return $this->properties['dateCreated'];
    }

    /**
     * @return string The date_updated
     */
    protected function getDateUpdated() {
        return $this->properties['dateUpdated'];
    }

    /**
     * @return string The end_date
     */
    protected function getEndDate() {
        return $this->properties['endDate'];
    }

    /**
     * @return string The include_subaccounts
     */
    protected function getIncludeSubaccounts() {
        return $this->properties['includeSubaccounts'];
    }

    /**
     * @return string The issues
     */
    protected function getIssues() {
        return $this->properties['issues'];
    }

    /**
     * @return string The quality_score_average
     */
    protected function getQualityScoreAverage() {
        return $this->properties['qualityScoreAverage'];
    }

    /**
     * @return string The quality_score_median
     */
    protected function getQualityScoreMedian() {
        return $this->properties['qualityScoreMedian'];
    }

    /**
     * @return string The quality_score_standard_deviation
     */
    protected function getQualityScoreStandardDeviation() {
        return $this->properties['qualityScoreStandardDeviation'];
    }

    /**
     * @return string The sid
     */
    protected function getSid() {
        return $this->properties['sid'];
    }

    /**
     * @return string The start_date
     */
    protected function getStartDate() {
        return $this->properties['startDate'];
    }

    /**
     * @return feedback_summary.Status The status
     */
    protected function getStatus() {
        return $this->properties['status'];
    }

    /**
     * Fetch a FeedbackSummaryInstance
     * 
     * @return FeedbackSummaryInstance Fetched FeedbackSummaryInstance
     */
    public function fetch() {
        return $this->proxy()->fetch();
    }

    /**
     * Deletes the FeedbackSummaryInstance
     * 
     * @return boolean True if delete succeeds, false otherwise
     */
    public function delete() {
        return $this->proxy()->delete();
    }

    /**
     * Magic getter to access properties
     * 
     * @param string $name Property to access
     * @return mixed The requested property
     * @throws TwilioException For unknown properties
     */
    public function __get($name) {
        if (array_key_exists($name, $this->properties)) {
            $method = 'get' . ucfirst($name);
            return $this->$method();
        }
        
        throw new TwilioException('Unknown property: ' . $name);
    }

    /**
     * Provide a friendly representation
     * 
     * @return string Machine friendly representation
     */
    public function __toString() {
        $context = array();
        foreach ($this->solution as $key => $value) {
            $context[] = "$key=$value";
        }
        return '[Twilio.Api.V2010.FeedbackSummaryInstance ' . implode(' ', $context) . ']';
    }
}