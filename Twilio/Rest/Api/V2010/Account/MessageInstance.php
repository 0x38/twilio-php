<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Rest\Api\V2010\Account;

use Twilio\Exceptions\TwilioException;
use Twilio\InstanceResource;
use Twilio\Rest\Api\V2010\Account\Message;
use Twilio\Values;
use Twilio\Version;

/**
 * @property string accountSid
 * @property string apiVersion
 * @property string body
 * @property string dateCreated
 * @property string dateUpdated
 * @property string dateSent
 * @property message.Direction direction
 * @property string errorCode
 * @property string errorMessage
 * @property string from
 * @property string numMedia
 * @property string numSegments
 * @property string price
 * @property string priceUnit
 * @property string sid
 * @property message.Status status
 * @property string subresourceUris
 * @property string to
 * @property string uri
 */
class MessageInstance extends InstanceResource {
    /**
     * Initialize the MessageInstance
     * 
     * @return MessageInstance 
     */
    public function __construct(Version $version, array $payload, $accountSid, $sid = null) {
        parent::__construct($version);
        
        // Marshaled Properties
        $this->properties = array(
            'accountSid' => $payload['account_sid'],
            'apiVersion' => $payload['api_version'],
            'body' => $payload['body'],
            'dateCreated' => $payload['date_created'],
            'dateUpdated' => $payload['date_updated'],
            'dateSent' => $payload['date_sent'],
            'direction' => $payload['direction'],
            'errorCode' => $payload['error_code'],
            'errorMessage' => $payload['error_message'],
            'from' => $payload['from'],
            'numMedia' => $payload['num_media'],
            'numSegments' => $payload['num_segments'],
            'price' => $payload['price'],
            'priceUnit' => $payload['price_unit'],
            'sid' => $payload['sid'],
            'status' => $payload['status'],
            'subresourceUris' => $payload['subresource_uris'],
            'to' => $payload['to'],
            'uri' => $payload['uri'],
        );
        
        $this->solution = array(
            'accountSid' => $accountSid,
            'sid' => $sid ?: $this->properties['sid'],
        );
    }

    /**
     * Generate an instance context for the instance, the context is capable of
     * performing various actions.  All instance actions are proxied to the context
     * 
     * @return MessageContext Context for this MessageInstance
     */
    protected function proxy() {
        if (!$this->context) {
            $this->context = new MessageContext(
                $this->version,
                $this->solution['accountSid'],
                $this->solution['sid']
            );
        }
        
        return $this->context;
    }

    /**
     * @return string The unique sid that identifies this account
     */
    protected function getAccountSid() {
        return $this->properties['accountSid'];
    }

    /**
     * @return string The version of the Twilio API used to process the message.
     */
    protected function getApiVersion() {
        return $this->properties['apiVersion'];
    }

    /**
     * @return string The text body of the message. Up to 1600 characters long.
     */
    protected function getBody() {
        return $this->properties['body'];
    }

    /**
     * @return string The date this resource was created
     */
    protected function getDateCreated() {
        return $this->properties['dateCreated'];
    }

    /**
     * @return string The date this resource was last updated
     */
    protected function getDateUpdated() {
        return $this->properties['dateUpdated'];
    }

    /**
     * @return string The date the message was sent
     */
    protected function getDateSent() {
        return $this->properties['dateSent'];
    }

    /**
     * @return message.Direction The direction of the message
     */
    protected function getDirection() {
        return $this->properties['direction'];
    }

    /**
     * @return string The error code associated with the message
     */
    protected function getErrorCode() {
        return $this->properties['errorCode'];
    }

    /**
     * @return string Human readable description of the ErrorCode
     */
    protected function getErrorMessage() {
        return $this->properties['errorMessage'];
    }

    /**
     * @return string The phone number that initiated the message
     */
    protected function getFrom() {
        return $this->properties['from'];
    }

    /**
     * @return string Number of media files associated with the message
     */
    protected function getNumMedia() {
        return $this->properties['numMedia'];
    }

    /**
     * @return string Indicates number of messages used to delivery the body
     */
    protected function getNumSegments() {
        return $this->properties['numSegments'];
    }

    /**
     * @return string The amount billed for the message
     */
    protected function getPrice() {
        return $this->properties['price'];
    }

    /**
     * @return string The currency in which Price is measured
     */
    protected function getPriceUnit() {
        return $this->properties['priceUnit'];
    }

    /**
     * @return string A string that uniquely identifies this message
     */
    protected function getSid() {
        return $this->properties['sid'];
    }

    /**
     * @return message.Status The status of this message
     */
    protected function getStatus() {
        return $this->properties['status'];
    }

    /**
     * @return string The subresource_uris
     */
    protected function getSubresourceUris() {
        return $this->properties['subresourceUris'];
    }

    /**
     * @return string The phone number that received the message
     */
    protected function getTo() {
        return $this->properties['to'];
    }

    /**
     * @return string The URI for this resource
     */
    protected function getUri() {
        return $this->properties['uri'];
    }

    /**
     * Deletes the MessageInstance
     * 
     * @return boolean True if delete succeeds, false otherwise
     */
    public function delete() {
        return $this->proxy()->delete();
    }

    /**
     * Fetch a MessageInstance
     * 
     * @return MessageInstance Fetched MessageInstance
     */
    public function fetch() {
        return $this->proxy()->fetch();
    }

    /**
     * Update the MessageInstance
     * 
     * @return MessageInstance Updated MessageInstance
     */
    public function update($options) {
        return $this->proxy()->update(
            $options
        );
    }

    /**
     * Access the media
     * 
     * @return MediaList 
     */
    protected function getMedia() {
        return $this->proxy()->media;
    }

    /**
     * Magic getter to access properties
     * 
     * @param string $name Property to access
     * @return mixed The requested property
     * @throws TwilioException For unknown properties
     */
    public function __get($name) {
        if (array_key_exists($name, $this->properties)) {
            $method = 'get' . ucfirst($name);
            return $this->$method();
        }
        
        throw new TwilioException('Unknown property: ' . $name);
    }

    /**
     * Provide a friendly representation
     * 
     * @return string Machine friendly representation
     */
    public function __toString() {
        $context = array();
        foreach ($this->solution as $key => $value) {
            $context[] = "$key=$value";
        }
        return '[Twilio.Api.V2010.MessageInstance ' . implode(' ', $context) . ']';
    }
}