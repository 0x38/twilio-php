<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Rest\Api\V2010\Account;

use Twilio\Exceptions\TwilioException;
use Twilio\ListResource;
use Twilio\Rest\Api\V2010\Account\Call\FeedbackSummaryList;
use Twilio\Values;
use Twilio\Version;

/**
 * @property FeedbackSummaryList feedbackSummaries
 */
class CallList extends ListResource {
    protected $_feedbackSummaries = null;

    /**
     * Construct the CallList
     * 
     * @param Version $version Version that contains the resource
     * @param string $accountSid The unique id of the Account responsible for
     *                           creating this Call
     * @return CallList 
     */
    public function __construct(Version $version, $accountSid) {
        parent::__construct($version);
        
        // Path Solution
        $this->solution = array(
            'accountSid' => $accountSid,
        );
        
        $this->uri = '/Accounts/' . $accountSid . '/Calls.json';
    }

    /**
     * Create a new CallInstance
     * 
     * @param string $to Phone number, SIP address or client identifier to call
     * @param string $from Twilio number from which to originate the call
     * @param array $options Optional Arguments
     * @return CallInstance Newly created CallInstance
     */
    public function create($to, $from, array $options = array()) {
        $options = new Values($options);
        
        $data = Values::of(array(
            'To' => $to,
            'From' => $from,
            'Url' => $options['url'],
            'ApplicationSid' => $options['applicationSid'],
            'Method' => $options['method'],
            'FallbackUrl' => $options['fallbackUrl'],
            'FallbackMethod' => $options['fallbackMethod'],
            'StatusCallback' => $options['statusCallback'],
            'StatusCallbackMethod' => $options['statusCallbackMethod'],
            'SendDigits' => $options['sendDigits'],
            'IfMachine' => $options['ifMachine'],
            'Timeout' => $options['timeout'],
            'Record' => $options['record'],
        ));
        
        $payload = $this->version->create(
            'POST',
            $this->uri,
            array(),
            $data
        );
        
        return new CallInstance(
            $this->version,
            $payload,
            $this->solution['accountSid']
        );
    }

    /**
     * Access the feedbackSummaries
     */
    protected function getFeedbackSummaries() {
        if (!$this->_feedbackSummaries) {
            $this->_feedbackSummaries = new FeedbackSummaryList(
                $this->version,
                $this->solution['accountSid']
            );
        }
        
        return $this->_feedbackSummaries;
    }

    /**
     * Constructs a CallContext
     * 
     * @param string $sid Call Sid that uniquely identifies the Call to fetch
     * @return CallContext 
     */
    public function getContext($sid) {
        return new CallContext(
            $this->version,
            $this->solution['accountSid'],
            $sid
        );
    }

    /**
     * Magic getter to lazy load subresources
     * 
     * @param string $name Subresource to return
     * @return ListResource The requested subresource
     * @throws TwilioException For unknown subresources
     */
    public function __get($name) {
        if (property_exists($this, '_' . $name)) {
            $method = 'get' . ucfirst($name);
            return $this->$method();
        }
        
        throw new TwilioException('Unknown subresource ' . $name);
    }

    /**
     * Provide a friendly representation
     * 
     * @return string Machine friendly representation
     */
    public function __toString() {
        return '[Twilio.Api.V2010.CallList]';
    }
}