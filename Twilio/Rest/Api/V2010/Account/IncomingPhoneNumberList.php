<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Rest\Api\V2010\Account;

use Twilio\Exceptions\TwilioException;
use Twilio\ListResource;
use Twilio\Rest\Api\V2010\Account\IncomingPhoneNumber\LocalList;
use Twilio\Rest\Api\V2010\Account\IncomingPhoneNumber\MobileList;
use Twilio\Rest\Api\V2010\Account\IncomingPhoneNumber\TollFreeList;
use Twilio\Values;
use Twilio\Version;

/**
 * @property LocalList local
 * @property MobileList mobile
 * @property TollFreeList tollFree
 */
class IncomingPhoneNumberList extends ListResource {
    protected $_local = null;
    protected $_mobile = null;
    protected $_tollFree = null;

    /**
     * Construct the IncomingPhoneNumberList
     * 
     * @param Version $version Version that contains the resource
     * @param string $ownerAccountSid A 34 character string that uniquely
     *                                identifies this resource.
     * @return IncomingPhoneNumberList 
     */
    public function __construct(Version $version, $ownerAccountSid) {
        parent::__construct($version);
        
        // Path Solution
        $this->solution = array(
            'ownerAccountSid' => $ownerAccountSid,
        );
        $this->uri = '/Accounts/' . $ownerAccountSid . '/IncomingPhoneNumbers.json';
    }

    /**
     * Create a new IncomingPhoneNumberInstance
     * 
     * @return IncomingPhoneNumberInstance Newly created IncomingPhoneNumberInstance
     */
    public function create($options) {
        $data = Values::of(array(
            'PhoneNumber' => $options['phoneNumber'],
            'AreaCode' => $options['areaCode'],
            'ApiVersion' => $options['apiVersion'],
            'FriendlyName' => $options['friendlyName'],
            'SmsApplicationSid' => $options['smsApplicationSid'],
            'SmsFallbackMethod' => $options['smsFallbackMethod'],
            'SmsFallbackUrl' => $options['smsFallbackUrl'],
            'SmsMethod' => $options['smsMethod'],
            'SmsUrl' => $options['smsUrl'],
            'StatusCallback' => $options['statusCallback'],
            'StatusCallbackMethod' => $options['statusCallbackMethod'],
            'VoiceApplicationSid' => $options['voiceApplicationSid'],
            'VoiceCallerIdLookup' => $options['voiceCallerIdLookup'],
            'VoiceFallbackMethod' => $options['voiceFallbackMethod'],
            'VoiceFallbackUrl' => $options['voiceFallbackUrl'],
            'VoiceMethod' => $options['voiceMethod'],
            'VoiceUrl' => $options['voiceUrl'],
        ));
        
        $payload = $this->version->create(
            'POST',
            $this->uri,
            array(),
            $data
        );
        
        return new IncomingPhoneNumberInstance(
            $this->version,
            $payload,
            $this->solution['ownerAccountSid']
        );
    }

    /**
     * Access the local
     */
    protected function getLocal() {
        if (!$this->_local) {
            $this->_local = new LocalList(
                $this->version,
                $this->solution['ownerAccountSid']
            );
        }
        
        return $this->_local;
    }

    /**
     * Access the mobile
     */
    protected function getMobile() {
        if (!$this->_mobile) {
            $this->_mobile = new MobileList(
                $this->version,
                $this->solution['ownerAccountSid']
            );
        }
        
        return $this->_mobile;
    }

    /**
     * Access the tollFree
     */
    protected function getTollFree() {
        if (!$this->_tollFree) {
            $this->_tollFree = new TollFreeList(
                $this->version,
                $this->solution['ownerAccountSid']
            );
        }
        
        return $this->_tollFree;
    }

    /**
     * Constructs a IncomingPhoneNumberContext
     * 
     * @param string $sid Fetch by unique incoming-phone-number Sid
     * @return IncomingPhoneNumberContext 
     */
    public function getContext($sid) {
        return new IncomingPhoneNumberContext(
            $this->version,
            $this->solution['ownerAccountSid'],
            $sid
        );
    }

    /**
     * Magic getter to lazy load subresources
     * 
     * @param string $name Subresource to return
     * @return ListResource The requested subresource
     * @throws TwilioException For unknown subresources
     */
    public function __get($name) {
        if (property_exists($this, '_' . $name)) {
            $method = 'get' . ucfirst($name);
            return $this->$method();
        }
        
        throw new TwilioException('Unknown subresource ' . $name);
    }

    /**
     * Provide a friendly representation
     * 
     * @return string Machine friendly representation
     */
    public function __toString() {
        return '[Twilio.Api.V2010.IncomingPhoneNumberList]';
    }
}